# -*- python -*-
# ex: set syntax=python:

# This is the buildmaster config file for cordova. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("cordova-slave", "pass")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9889

repos={}
repos['JS']='https://git-wip-us.apache.org/repos/asf/cordova-js.git'
repos['COHO']='https://git-wip-us.apache.org/repos/asf/cordova-coho.git'
repos['CLI']='https://git-wip-us.apache.org/repos/asf/cordova-cli.git'
repos['ANDROID']='https://git-wip-us.apache.org/repos/asf/cordova-android.git'
repos['IOS']='https://git-wip-us.apache.org/repos/asf/cordova-ios.git'
repos['MSPEC']='https://git-wip-us.apache.org/repos/asf/cordova-mobile-spec.git'
repos['TESTMASTER']='https://github.com/drkemp/bb-test.git'

# this list is separate only to make iterating through it easier
pluginrepos={}
pluginrepos['BATTERY']='https://git-wip-us.apache.org/repos/asf/cordova-plugin-battery-status.git'
pluginrepos['CAMERA']='https://git-wip-us.apache.org/repos/asf/cordova-plugin-camera.git'
pluginrepos['CONSOLE']='https://git-wip-us.apache.org/repos/asf/cordova-plugin-console.git'
pluginrepos['CONTACTS']='https://git-wip-us.apache.org/repos/asf/cordova-plugin-contacts.git'
pluginrepos['DEVICE']='https://git-wip-us.apache.org/repos/asf/cordova-plugin-device.git'
pluginrepos['DEVICEMOTION']='https://git-wip-us.apache.org/repos/asf/cordova-plugin-device-motion.git'
pluginrepos['DEVICEORIENTATION']='https://git-wip-us.apache.org/repos/asf/cordova-plugin-device-orientation.git'
pluginrepos['DIALOGS']='https://git-wip-us.apache.org/repos/asf/cordova-plugin-dialogs.git'
pluginrepos['FILE']='https://git-wip-us.apache.org/repos/asf/cordova-plugin-file.git'
pluginrepos['FILETRANSFER']='https://git-wip-us.apache.org/repos/asf/cordova-plugin-file-transfer.git'
pluginrepos['GEOLOCATION']='https://git-wip-us.apache.org/repos/asf/cordova-plugin-geolocation.git'
pluginrepos['GLOBALIZATION']='https://git-wip-us.apache.org/repos/asf/cordova-plugin-globalization.git'
pluginrepos['INAPPBROWSER']='https://git-wip-us.apache.org/repos/asf/cordova-plugin-inappbrowser.git'
pluginrepos['MEDIA']='https://git-wip-us.apache.org/repos/asf/cordova-plugin-media.git'
pluginrepos['MEDIACAPTURE']='https://git-wip-us.apache.org/repos/asf/cordova-plugin-media-capture.git'
pluginrepos['NETWORKINFO']='https://git-wip-us.apache.org/repos/asf/cordova-plugin-network-information.git'
pluginrepos['SPLASHSCREEN']='https://git-wip-us.apache.org/repos/asf/cordova-plugin-splashscreen.git'
pluginrepos['VIBRATION']='https://git-wip-us.apache.org/repos/asf/cordova-plugin-vibration.git'


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. 

from buildbot.changes.gitpoller import GitPoller

projectbranches=['master','3.0.0']
polltime=300
stabletime=30

c['change_source'] = []
c['change_source'].append(GitPoller(repos['JS'],project='JS',category='JS', branches=projectbranches, pollinterval=polltime))
c['change_source'].append(GitPoller(repos['COHO'],project='COHO',category='TOOLS', branches=projectbranches, pollinterval=polltime))
c['change_source'].append(GitPoller(repos['CLI'],project='CLI',category='TOOLS', branches=projectbranches, pollinterval=polltime))
c['change_source'].append(GitPoller(repos['MSPEC'],project='MSPEC',category='TEST', branches=projectbranches, pollinterval=polltime))
c['change_source'].append(GitPoller(repos['ANDROID'],project='ANDROID',category='PLATFORM', branches=projectbranches, pollinterval=polltime))
c['change_source'].append(GitPoller(repos['IOS'],project='IOS',category='PLATFORM', branches=projectbranches, pollinterval=polltime))
c['change_source'].append(GitPoller(repos['TESTMASTER'],project='TESTMASTER',category='TESTMASTER', branches=['master'], pollinterval=polltime))

for plugin,prepo in pluginrepos.iteritems():
  c['change_source'].append(GitPoller(prepo, project='PLUGIN',category=plugin, branches=projectbranches, pollinterval=polltime))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="JS",
                            change_filter=filter.ChangeFilter(branch='master',project=['JS']),
                            treeStableTimer=stabletime,
                            builderNames=["runtests_JS"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="ANDROID",
                            change_filter=filter.ChangeFilter(branch='3.0.0',project=['ANDROID','PLUGIN','COHO','CLI','MSPEC','TESTMASTER']),
                            treeStableTimer=stabletime,
                            builderNames=["runtests_Android_3_0_0"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="IOS 3.0.0",
                            change_filter=filter.ChangeFilter(branch='3.0.0',project=['IOS','COHO','PLUGIN','CLI','MSPEC','TESTMASTER']),
                            treeStableTimer=stabletime,
                            builderNames=["runtests_IOS_3_0_0"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="ANDROID master",
                            change_filter=filter.ChangeFilter(branch='master',project=['ANDROID','PLUGIN','COHO','CLI','MSPEC','TESTMASTER']),
                            treeStableTimer=stabletime,
                            builderNames=["runtests_Android_master"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="IOS master",
                            change_filter=filter.ChangeFilter(branch='master',project=['IOS','COHO','PLUGIN','CLI','MSPEC','TESTMASTER']),
                            treeStableTimer=stabletime,
                            builderNames=["runtests_IOS_master"]))

c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["runtests_JS","runtests_Android_3_0_0","runtests_IOS_3_0_0","runtests_Android_master","runtests_IOS_master"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.config import BuilderConfig

c['builders'] = []

factory_JS = BuildFactory()
factory_JS.addStep(Git(repourl=repos['JS'], mode='incremental', workdir='build/cordova-js'))
factory_JS.addStep(ShellCommand(command=["npm","install"], workdir='build/cordova-js'))
factory_JS.addStep(ShellCommand(command=["grunt"], workdir='build/cordova-js'))

c['builders'].append(
    BuilderConfig(name="runtests_JS",
      slavenames=["cordova-slave"],
      factory=factory_JS))

factory_IOS = BuildFactory()
factory_IOS.addStep(ShellCommand(command=["rm","-rf","medic"],workdir='build'))
factory_IOS.addStep(ShellCommand(command=["git","clone",repos['TESTMASTER'],"medic"],workdir='build'))
factory_IOS.addStep(ShellCommand(command=["npm","install"], workdir='build/medic'))
factory_IOS.addStep(ShellCommand(command=["cp","../../../../config.json ./config.json"], workdir='build/medic'))
factory_IOS.addStep(ShellCommand(command=["node", "medic/runtests.js", "--ios","--branch=3.0.0"], workdir='build', timeout=750))

c['builders'].append(
    BuilderConfig(name="runtests_IOS_3_0_0",
      slavenames=["cordova-slave"],
      factory=factory_IOS))

factory_Android = BuildFactory()
factory_Android.addStep(ShellCommand(command=["rm","-rf","medic"],workdir='build'))
factory_Android.addStep(ShellCommand(command=["git","clone",repos['TESTMASTER'],"medic"],workdir='build'))
factory_Android.addStep(ShellCommand(command=["npm","install"], workdir='build/medic'))
factory_Android.addStep(ShellCommand(command=["cp","../../../../config.json ./config.json"], workdir='build/medic'))
factory_Android.addStep(ShellCommand(command=["node", "medic/runtests.js", "--android","--branch=3.0.0"], workdir='build', timeout=750))

c['builders'].append(
    BuilderConfig(name="runtests_Android_3_0_0",
      slavenames=["cordova-slave"],
      factory=factory_Android))

factory_IOS_master = BuildFactory()
factory_IOS_master.addStep(ShellCommand(command=["rm","-rf","medic"],workdir='build'))
factory_IOS_master.addStep(ShellCommand(command=["git","clone",repos['TESTMASTER'],"medic"],workdir='build'))
factory_IOS_master.addStep(ShellCommand(command=["npm","install"], workdir='build/medic'))
factory_IOS_master.addStep(ShellCommand(command=["cp","../../../../config.json ./config.json"], workdir='build/medic'))
factory_IOS_master.addStep(ShellCommand(command=["node", "medic/runtests.js", "--ios", "--js"], workdir='build', timeout=750))

c['builders'].append(
    BuilderConfig(name="runtests_IOS_master",
      slavenames=["cordova-slave"],
      factory=factory_IOS_master))

factory_Android_master = BuildFactory()
factory_Android_master.addStep(ShellCommand(command=["rm","-rf","medic"],workdir='build'))
factory_Android_master.addStep(ShellCommand(command=["git","clone",repos['TESTMASTER'],"medic"],workdir='build'))
factory_Android_master.addStep(ShellCommand(command=["npm","install"], workdir='build/medic'))
factory_Android.master.addStep(ShellCommand(command=["cp","../../../../config.json ./config.json"], workdir='build/medic'))
factory_Android_master.addStep(ShellCommand(command=["node", "medic/runtests.js", "--android", "--js"], workdir='build', timeout=750))

c['builders'].append(
    BuilderConfig(name="runtests_Android_master",
      slavenames=["cordova-slave"],
      factory=factory_Android_master))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("pyflakes","pyflakes")]),
    gracefulShutdown = False,
    forceBuild = True, # 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Cordova Testing"
c['titleURL'] = "http://cordova.apache.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
